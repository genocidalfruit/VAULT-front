---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { buildNavigationTree, generateBreadcrumbsForPost, findPostInTree } from '../../utils/navigationUtils';
import NavigationTree from '../../components/NavigationTree.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;

// Function to get title from filename if not provided
function getTitleFromFilename(slug: string): string {
  const filename = slug.split('/').pop() || '';
  return filename
    .replace(/\.(md|canvas)$/, '')
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

// Function to check if file is a canvas file
function isCanvasFile(slug: string): boolean {
  return slug.endsWith('.canvas');
}

// Function to parse canvas content
function parseCanvasContent(content: string) {
  try {
    const canvasData = JSON.parse(content);
    return {
      isValid: true,
      data: canvasData,
      nodes: canvasData.nodes || [],
      edges: canvasData.edges || []
    };
  } catch (error) {
    return {
      isValid: false,
      error: 'Invalid canvas file format'
    };
  }
}

// Get title
const title = post.data.title || getTitleFromFilename(post.slug);
const isCanvas = isCanvasFile(post.slug);

let canvasData = null;

if (isCanvas) {
  // For canvas files, try to parse the content
  canvasData = parseCanvasContent(post.body);
}

// Build navigation tree and breadcrumbs
const navigationTree = await buildNavigationTree();
const breadcrumbs = generateBreadcrumbsForPost(post.slug, title);
const currentPost = findPostInTree(navigationTree, post.slug);

// Render content based on file type
let Content;
if (isCanvas && canvasData?.isValid) {
  // For valid canvas files, we'll render a custom component
  Content = null;
} else if (!isCanvas) {
  // For markdown files, render normally
  const result = await post.render();
  Content = result.Content;
} else {
  // For invalid canvas files, show error
  Content = null;
}
---

<Layout title={title}>
  <main class="post-page">
    <div class="container">
      <aside class="sidebar">
        <div class="navigation-header">
          <h3>Knowledge Base</h3>
          <a href="/" class="back-home">← Home</a>
        </div>
        <div class="navigation-container">
          <NavigationTree tree={navigationTree} currentPath={post.slug} />
        </div>
      </aside>
      
      <div class="content-area">
        <Breadcrumbs breadcrumbs={breadcrumbs} />
        
        <article class="post-article">
          <header class="post-header">
            <h1>{title}</h1>
            {isCanvas && (
              <div class="file-type-badge">
                <span class="badge canvas-badge">Canvas File</span>
              </div>
            )}
          </header>

          <div class="post-content">
            {isCanvas ? (
              canvasData?.isValid ? (
                <div class="canvas-content">
                  <div class="canvas-info">
                    <h2>Canvas Overview</h2>
                    <p>This is an Obsidian Canvas file containing {canvasData.nodes.length} nodes and {canvasData.edges.length} connections.</p>
                  </div>
                  
                  {canvasData.nodes.length > 0 && (
                    <div class="canvas-nodes">
                      <h3>Nodes</h3>
                      <div class="nodes-grid">
                        {canvasData.nodes.map((node, index) => (
                          <div class="node-card" key={index}>
                            <div class="node-header">
                              <span class="node-type">{node.type || 'text'}</span>
                              {node.width && node.height && (
                                <span class="node-size">{node.width}×{node.height}</span>
                              )}
                            </div>
                            {node.text && (
                              <div class="node-content">
                                <pre>{node.text}</pre>
                              </div>
                            )}
                            {node.file && (
                              <div class="node-file">
                                <strong>File:</strong> {node.file}
                              </div>
                            )}
                            {node.url && (
                              <div class="node-url">
                                <strong>URL:</strong> <a href={node.url} target="_blank" rel="noopener noreferrer">{node.url}</a>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {canvasData.edges.length > 0 && (
                    <div class="canvas-edges">
                      <h3>Connections</h3>
                      <div class="edges-list">
                        {canvasData.edges.map((edge, index) => (
                          <div class="edge-item" key={index}>
                            <span class="edge-from">Node {edge.fromNode}</span>
                            <span class="edge-arrow">→</span>
                            <span class="edge-to">Node {edge.toNode}</span>
                            {edge.label && <span class="edge-label">({edge.label})</span>}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div class="canvas-error">
                  <h2>Canvas File Error</h2>
                  <p>This canvas file could not be parsed. It may be corrupted or in an unsupported format.</p>
                  <details>
                    <summary>Raw Content</summary>
                    <pre class="raw-content">{post.body}</pre>
                  </details>
                </div>
              )
            ) : (
              Content && <Content />
            )}
          </div>
        </article>
      </div>
    </div>
  </main>
</Layout>

<style>
  .post-page {
    min-height: 100vh;
    padding: 1rem 0;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
    align-items: start;
  }

  .sidebar {
    background: #2a2a2a;
    border-radius: 8px;
    border: 1px solid #404040;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    order: 2;
  }

  .navigation-header {
    padding: 1.25rem;
    border-bottom: 1px solid #404040;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .navigation-header h3 {
    color: #ffffff;
    font-size: 0.875rem;
    font-weight: 600;
    margin: 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .back-home {
    color: #888888;
    text-decoration: none;
    font-size: 0.75rem;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .back-home:hover {
    color: #cccccc;
  }

  .navigation-container {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
  }

  .content-area {
    min-width: 0;
    order: 1;
  }

  .post-article {
    background: #2a2a2a;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    border: 1px solid #404040;
  }

  .post-header {
    padding: 1.5rem;
    border-bottom: 1px solid #404040;
  }

  .post-header h1 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #ffffff;
    margin: 0 0 1rem 0;
    font-family: 'JetBrains Mono', monospace;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .file-type-badge {
    margin-bottom: 1rem;
  }

  .badge {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .canvas-badge {
    background: #4a5568;
    color: #e2e8f0;
  }

  .post-content {
    padding: 1.5rem;
    line-height: 1.8;
    font-size: 0.875rem;
    color: #ffffff;
  }

  /* Canvas-specific styles */
  .canvas-content {
    color: #cccccc;
  }

  .canvas-info {
    margin-bottom: 2rem;
    padding: 1rem;
    background: #333333;
    border-radius: 6px;
    border: 1px solid #404040;
  }

  .canvas-info h2 {
    color: #ffffff;
    font-size: 1.25rem;
    margin: 0 0 0.5rem 0;
  }

  .canvas-nodes, .canvas-edges {
    margin-bottom: 2rem;
  }

  .canvas-nodes h3, .canvas-edges h3 {
    color: #ffffff;
    font-size: 1.125rem;
    margin: 0 0 1rem 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .nodes-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: 1fr;
  }

  .node-card {
    background: #333333;
    border: 1px solid #404040;
    border-radius: 6px;
    padding: 1rem;
  }

  .node-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .node-type {
    background: #555555;
    color: #ffffff;
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .node-size {
    color: #888888;
    font-size: 0.75rem;
  }

  .node-content pre {
    background: #2a2a2a;
    padding: 0.75rem;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: pre-wrap;
    word-wrap: break-word;
    margin: 0.5rem 0 0 0;
  }

  .node-file, .node-url {
    margin-top: 0.5rem;
    font-size: 0.875rem;
  }

  .node-url a {
    color: #ffffff;
    text-decoration: underline;
  }

  .edges-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .edge-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: #333333;
    border-radius: 4px;
    font-size: 0.875rem;
  }

  .edge-arrow {
    color: #888888;
  }

  .edge-label {
    color: #888888;
    font-style: italic;
  }

  .canvas-error {
    color: #cccccc;
    padding: 1rem;
    background: #333333;
    border-radius: 6px;
    border: 1px solid #404040;
  }

  .canvas-error h2 {
    color: #ffffff;
    margin: 0 0 1rem 0;
  }

  .raw-content {
    background: #2a2a2a;
    padding: 1rem;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: pre-wrap;
    word-wrap: break-word;
    max-height: 300px;
    overflow-y: auto;
  }

  /* Markdown content styles */
  .post-content :global(h1) {
    font-size: 1.5rem;
    font-weight: 600;
    color: #ffffff;
    margin: 2rem 0 1rem 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .post-content :global(h2) {
    font-size: 1.25rem;
    font-weight: 600;
    color: #ffffff;
    margin: 1.75rem 0 0.875rem 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .post-content :global(h3) {
    font-size: 1.125rem;
    font-weight: 600;
    color: #ffffff;
    margin: 1.5rem 0 0.75rem 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .post-content :global(h4) {
    font-size: 1rem;
    font-weight: 600;
    color: #ffffff;
    margin: 1.25rem 0 0.625rem 0;
    font-family: 'JetBrains Mono', monospace;
  }

  .post-content :global(p) {
    margin: 0 0 1.5rem 0;
    color: #cccccc;
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    padding-left: 1.5rem;
    margin: 0 0 1.5rem 0;
  }

  .post-content :global(li) {
    margin-bottom: 0.5rem;
    color: #cccccc;
  }

  .post-content :global(blockquote) {
    border-left: 4px solid #555555;
    padding-left: 1.5rem;
    margin: 2rem 0;
    color: #888888;
    font-style: italic;
  }

  .post-content :global(code) {
    background: #404040;
    color: #ffffff;
    padding: 0.125rem 0.375rem;
    border-radius: 4px;
    font-family: 'JetBrains Mono', 'Monaco', 'Menlo', monospace;
    font-size: 0.75rem;
  }

  .post-content :global(pre) {
    background: #1a1a1a;
    color: #ffffff;
    padding: 1.25rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid #404040;
  }

  .post-content :global(pre code) {
    background: none;
    padding: 0;
    font-size: 0.75rem;
  }

  .post-content :global(strong) {
    color: #ffffff;
    font-weight: 600;
  }

  .post-content :global(em) {
    color: #cccccc;
    font-style: italic;
  }

  .post-content :global(a) {
    color: #ffffff;
    text-decoration: underline;
    transition: color 0.2s ease;
  }

  .post-content :global(a:hover) {
    color: #cccccc;
  }

  /* Tablet and larger screens */
  @media (min-width: 768px) {
    .post-page {
      padding: 1.5rem 0;
    }

    .container {
      grid-template-columns: 250px 1fr;
      gap: 2rem;
      padding: 0 1.5rem;
    }

    .sidebar {
      position: sticky;
      top: 1.5rem;
      max-height: calc(100vh - 3rem);
      order: 1;
    }

    .content-area {
      order: 2;
    }

    .post-header {
      padding: 2rem;
    }

    .post-header h1 {
      font-size: 2rem;
    }

    .post-content {
      padding: 2rem;
      font-size: 1rem;
    }

    .nodes-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }

    .post-content :global(h1) {
      font-size: 2rem;
    }

    .post-content :global(h2) {
      font-size: 1.625rem;
    }

    .post-content :global(h3) {
      font-size: 1.375rem;
    }

    .post-content :global(h4) {
      font-size: 1.25rem;
    }

    .post-content :global(code) {
      font-size: 0.875rem;
    }

    .post-content :global(pre code) {
      font-size: 0.875rem;
    }
  }

  /* Desktop screens */
  @media (min-width: 1024px) {
    .container {
      grid-template-columns: 300px 1fr;
      gap: 3rem;
    }

    .post-header {
      padding: 3rem;
    }

    .post-header h1 {
      font-size: 2.625rem;
    }

    .post-content {
      padding: 3rem;
    }
  }
</style>
</Layout>