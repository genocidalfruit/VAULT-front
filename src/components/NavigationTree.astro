---
import type { PostMetadata } from '../types/navigation';

interface Props {
  tree: PostMetadata[];
  currentPath?: string;
  level?: number;
}

const { tree, currentPath = '', level = 0 } = Astro.props;
---

<div class="text-sm" data-level={level}>
  {tree.map((item) => (
    <div class="mb-0.5" data-type={item.type}>
      {item.type === 'folder' ? (
        <div class="mb-1">
          <div class="folder-header flex items-center gap-1 rounded transition-all duration-200 hover:bg-dark-800 group">
            <button 
              class="folder-toggle flex items-center justify-center w-5 h-5 p-0 bg-transparent border-none text-dark-300 cursor-pointer rounded transition-all duration-200 flex-shrink-0 relative z-10 focus:outline-2 focus:outline-dark-600 focus:outline-offset-1"
              data-path={item.path}
              aria-expanded="false"
              aria-controls={`folder-${item.path.replace(/\//g, '-')}`}
            >
              <span class="flex items-center justify-center w-3 h-3 transition-transform duration-200">
                <svg class="icon-collapsed w-3 h-3" viewBox="0 0 12 12" fill="none">
                  <path d="M4.5 3L7.5 6L4.5 9" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <svg class="icon-expanded w-3 h-3 hidden" viewBox="0 0 12 12" fill="none">
                  <path d="M3 4.5L6 7.5L9 4.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </span>
            </button>
            <div 
              class="folder-name-container flex-1 flex items-center py-1.5 px-2 text-dark-300 rounded transition-all duration-200 font-medium min-w-0 cursor-pointer group-hover:bg-transparent group-hover:text-white"
              data-path={item.path}
            >
              <span class="font-medium whitespace-nowrap overflow-hidden text-ellipsis">{item.title}</span>
            </div>
          </div>
          <div 
            class="folder-children ml-4 mt-1 border-l border-dark-700 pl-3 transition-all duration-300 hidden"
            id={`folder-${item.path.replace(/\//g, '-')}`}
          >
            {item.children && (
              <Astro.self 
                tree={item.children} 
                currentPath={currentPath}
                level={level + 1}
              />
            )}
          </div>
        </div>
      ) : (
        <a 
          href={`/posts/${item.path}`}
          class={`file-link flex items-center gap-2 py-1.5 px-2 text-dark-300 no-underline rounded transition-all duration-200 ml-5 hover:bg-dark-800 hover:text-white focus:outline-2 focus:outline-dark-600 focus:outline-offset-1 ${currentPath === item.path ? 'bg-dark-700 text-white font-medium' : ''}`}
          data-path={item.path}
        >
          <span class="flex items-center justify-center w-3 h-3 opacity-70">
            <svg class="w-3 h-3" viewBox="0 0 12 12" fill="none">
              <path d="M2 1.5C2 1.22386 2.22386 1 2.5 1H6.5L9 3.5V10.5C9 10.7761 8.77614 11 8.5 11H2.5C2.22386 11 2 10.7761 2 10.5V1.5Z" stroke="currentColor" stroke-width="1" fill="none"/>
            </svg>
          </span>
          <span class="text-xs leading-snug whitespace-nowrap overflow-hidden text-ellipsis">{item.title}</span>
        </a>
      )}
    </div>
  ))}
</div>

<style>
  /* Enhanced hover for expanded folders that are clickable */
  .folder-header.clickable:hover {
    background: #404040 !important;
  }

  .folder-toggle[aria-expanded="false"] .icon-expanded,
  .folder-toggle[aria-expanded="true"] .icon-collapsed {
    display: none;
  }

  .folder-toggle[aria-expanded="false"] .icon-collapsed,
  .folder-toggle[aria-expanded="true"] .icon-expanded {
    display: block;
  }

  .folder-children.expanded {
    display: block !important;
  }

  /* Loading skeleton */
  .loading-skeleton {
    background: linear-gradient(90deg, #333333 25%, #404040 50%, #333333 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 4px;
    height: 20px;
    margin-bottom: 4px;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>

<script>
  // Handle folder toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const folderToggles = document.querySelectorAll('.folder-toggle');
    
    // Function to toggle folder state
    function toggleFolder(button: HTMLButtonElement) {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      const targetId = button.getAttribute('aria-controls');
      const target = document.getElementById(targetId!);
      const folderHeader = button.parentElement as HTMLElement;
      const folderNameContainer = folderHeader?.querySelector('.folder-name-container') as HTMLElement;
      
      if (target && folderNameContainer && folderHeader) {
        if (isExpanded) {
          // Collapse
          button.setAttribute('aria-expanded', 'false');
          target.style.display = 'none';
          target.classList.remove('expanded');
          folderNameContainer.classList.remove('expanded', 'clickable');
          folderHeader.classList.remove('clickable');
        } else {
          // Expand
          button.setAttribute('aria-expanded', 'true');
          target.style.display = 'block';
          target.classList.add('expanded');
          folderNameContainer.classList.add('expanded', 'clickable');
          folderHeader.classList.add('clickable');
        }
      }
    }
    
    // Handle toggle button clicks
    folderToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleFolder(e.currentTarget as HTMLButtonElement);
      });
    });

    // Handle folder name clicks
    document.addEventListener('click', (e) => {
      const folderNameContainer = (e.target as HTMLElement).closest('.folder-name-container');
      if (folderNameContainer) {
        const folderPath = folderNameContainer.getAttribute('data-path');
        const folderHeader = folderNameContainer.parentElement as HTMLElement;
        const toggleButton = folderHeader?.querySelector('.folder-toggle') as HTMLButtonElement;
        
        if (folderNameContainer.classList.contains('clickable')) {
          // If expanded, navigate to category page
          if (folderPath) {
            window.location.href = `/category/${folderPath}`;
          }
        } else {
          // If collapsed, expand the folder
          if (toggleButton) {
            toggleFolder(toggleButton);
          }
        }
      }
    });

    // Keyboard navigation for toggle buttons
    document.addEventListener('keydown', (e) => {
      if (e.target && (e.target as HTMLElement).classList.contains('folder-toggle')) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          (e.target as HTMLElement).click();
        }
      }
    });

    // Auto-expand folders for current path
    const currentPath = window.location.pathname.replace('/posts/', '');
    if (currentPath) {
      const pathParts = currentPath.split('/');
      let currentFolder = '';
      
      for (let i = 0; i < pathParts.length - 1; i++) {
        currentFolder = currentFolder ? `${currentFolder}/${pathParts[i]}` : pathParts[i];
        const folderId = `folder-${currentFolder.replace(/\//g, '-')}`;
        const folderElement = document.getElementById(folderId);
        const toggleButton = document.querySelector(`[aria-controls="${folderId}"]`) as HTMLButtonElement;
        const folderHeader = toggleButton?.parentElement as HTMLElement;
        const folderNameContainer = folderHeader?.querySelector('.folder-name-container') as HTMLElement;
        
        if (folderElement && toggleButton && folderNameContainer && folderHeader) {
          toggleButton.setAttribute('aria-expanded', 'true');
          folderElement.style.display = 'block';
          folderElement.classList.add('expanded');
          folderNameContainer.classList.add('expanded', 'clickable');
          folderHeader.classList.add('clickable');
        }
      }
    }
  });
</script>